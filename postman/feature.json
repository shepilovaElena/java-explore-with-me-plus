{
	"info": {
		"_postman_id": "e20d4183-81e7-404a-a0c5-6183b9ce3032",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40129654"
	},
	"item": [
		{
			"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"             const comment = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID:\", comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –ø—É—Å—Ç–æ–π\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç ‚Äî –º–∞—Å—Å–∏–≤\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.be.an(\"array\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/:userId/comment",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						":userId",
						"comment"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"             const comment = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"commentSource\", JSON.stringify(comment));\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID:\", comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É\", function () {\r",
							"    const data = pm.response.json();\r",
							"    const source = JSON.parse(pm.collectionVariables.get('commentSource'));\r",
							"    pm.expect(source.content).equal(data.content, \"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}comment/:commentId",
					"host": [
						"{{baseUrl}}comment"
					],
					"path": [
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{test_comment_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"id\");\r",
							"    pm.collectionVariables.set(\"created_comment_id\", data.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç Postman\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/:userId/comment?eventId={{test_event_id}}\n",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						":userId",
						"comment"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{test_event_id}}\n"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment1 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"        const comment2 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"        const comment3 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å\r",
							"        const commentsIds = [comment1.id, comment2.id, comment3.id];\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_comment_ids\", commentsIds)\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({ commentsIds: commentsIds }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å 204 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql('');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ids\": [{{created_comment_id}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}admin/comments",
					"host": [
						"{{baseUrl}}admin"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID:\", comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å 204 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–æ\", function () {\r",
							"    pm.response.to.not.have.body;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ids\": [{{created_comment_id}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/:userId/comment/:commentId",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						":userId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						},
						{
							"key": "commentId",
							"value": "{{test_comment_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\r",
							"        let updateComment = rnd.getComment();\r",
							"        updateComment.userId = user.id;\r",
							"        updateComment.eventId = event.id;\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"response\", updateComment);\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: updateComment,\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID:\", comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ\", function () {\r",
							"    const data = pm.response.json();\r",
							"    const source = pm.collectionVariables.get('response');\r",
							"    pm.expect(data.content).equal(source.content, \"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–µ\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/:userId/comment/:commentId",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						":userId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						},
						{
							"key": "commentId",
							"value": "{{test_comment_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—é",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const comments = pm.response.json();",
							"",
							"pm.test(\"–ü–æ–ª—É—á–µ–Ω–æ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\", function () {",
							"    pm.expect(comments).to.be.an(\"array\").with.lengthOf(3);",
							"});",
							"",
							"pm.test(\"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É\", function () {",
							"    const actual = pm.response.json();",
							"    const expected = JSON.parse(pm.collectionVariables.get('commentSources'))",
							"    ",
							"    const actualMap = {};",
							"    actual.forEach(comment => actualMap[comment.id] = comment);",
							"",
							"    expected.forEach((expectedComment, index) => {",
							"        const actualComment = actualMap[expectedComment.id];",
							"        pm.expect(actualComment, `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID ${expectedComment.id} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å`).to.exist;",
							"        pm.expect(actualComment.content).to.eql(expectedComment.content, `–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"        pm.expect(actualComment.user).to.eql(expectedComment.user, `userId –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"        pm.expect(actualComment.event).to.eql(expectedComment.event, `eventId –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"             const comment1 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"             const comment2 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"             const comment3 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        const commentsIds = [comment1.id, comment2.id, comment3.id];\r",
							"\r",
							"        const commentSources = [comment1, comment2, comment3]\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"      \r",
							"\r",
							"\r",
							"         pm.collectionVariables.set(\"commentSources\", JSON.stringify(commentSources));\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_ids\", commentsIds);\r",
							"\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ID:\", commentsIds);\r",
							"\r",
							"    \r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}comment?eventId={{test_event_id}}",
					"host": [
						"{{baseUrl}}comment"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{test_event_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const comments = pm.response.json();",
							"",
							"pm.test(\"–ü–æ–ª—É—á–µ–Ω–æ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\", function () {",
							"    pm.expect(comments).to.be.an(\"array\").with.lengthOf(3);",
							"});",
							"",
							"pm.test(\"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É\", function () {",
							"    const actual = pm.response.json();",
							"    const expected = JSON.parse(pm.collectionVariables.get('commentSources'))",
							"     const actualMap = {};",
							"    ",
							"    actual.forEach(comment => {",
							"        actualMap[comment.id] = comment;",
							"    });",
							"",
							"      expected.forEach(expectedComment => {",
							"        const actualComment = actualMap[expectedComment.id];",
							"        pm.expect(actualComment, `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID ${expectedComment.id} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å`).to.exist;",
							"        pm.expect(actualComment.content).to.eql(expectedComment.content, `–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"        pm.expect(actualComment.user).to.eql(expectedComment.user, `user –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"        pm.expect(actualComment.event).to.eql(expectedComment.event, `event –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID ${expectedComment.id} –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å`);",
							"    });",
							"",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"             const comment1 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"             const comment2 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"             const comment3 = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        const commentsIds = [comment1.id, comment2.id, comment3.id];\r",
							"\r",
							"        const commentSources = [comment1, comment2, comment3]\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"      \r",
							"\r",
							"\r",
							"         pm.collectionVariables.set(\"commentSources\", JSON.stringify(commentSources));\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_ids\", commentsIds);\r",
							"\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ID:\", commentsIds);\r",
							"\r",
							"    \r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}comment?userId={{test_user_id}}",
					"host": [
						"{{baseUrl}}comment"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –µ–≥–æ —Ç–µ–∫—Å—Ç—É",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const comments = pm.response.json();",
							"",
							"pm.test(\"–ü–æ–ª—É—á–µ–Ω–æ 1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\", function () {",
							"    pm.expect(comments).to.be.an(\"array\").with.lengthOf(1);",
							"});",
							"",
							"pm.test(\"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É\", function () {",
							"    const actual = pm.response.json()[0];",
							"    const expected = JSON.parse(pm.collectionVariables.get('commentSource'));",
							"    pm.expect(actual.id).to.eql(expected.id, \"ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å\");",
							"    pm.expect(actual.content).to.eql(expected.content, \"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å\");",
							"    pm.expect(actual.userId).to.eql(expected.userId, \"userId –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å\");",
							"    pm.expect(actual.eventId).to.eql(expected.eventId, \"eventId –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å\");",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const createTestData = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment(user.id, event.id));\r",
							"\r",
							"        pm.collectionVariables.set(\"content\", comment.content);\r",
							"        pm.collectionVariables.set(\"commentSource\", JSON.stringify(comment));\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID:\", comment.id);\r",
							"\r",
							"    \r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await createTestData();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}comment?content={{content}}",
					"host": [
						"{{baseUrl}}comment"
					],
					"query": [
						{
							"key": "content",
							"value": "{{content}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comment?eventId=\" + eventId, comment, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–æ id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\", verbose);",
					"    }",
					"",
					"    async findComment(commentId, verbose=null) {",
					"        return this.get(\"/comment/\" + commentId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ id\", verbose);",
					"    }",
					"",
					"      async findComment(commentId, verbose=null) {",
					"        return this.get('/comment/' + commentId, comment, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ post-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ patch-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ get-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–∫–∞.\\n\", err,",
					"                             \"\\n–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ \" + ",
					"                             \"–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è - \", response.code, \", —Ç–µ–ª–æ: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}') === 'true',",
					"            participantLimit: parseInt(pm.variables.replaceIn('{{$randomInt}}')),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}') === 'true',",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getComment(userId, eventId) {",
					"        return {",
					"            content: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            user: userId,",
					"            event: eventId",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/",
			"type": "default"
		},
		{
			"key": "commentId",
			"value": "{{test_comment_id}}",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": ""
		},
		{
			"key": "test_event_id",
			"value": ""
		},
		{
			"key": "test_comment_id",
			"value": ""
		},
		{
			"key": "created_comment_id",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "commentSource",
			"value": ""
		},
		{
			"key": "test_comment_ids",
			"value": ""
		},
		{
			"key": "commentSources",
			"value": "",
			"type": "string"
		},
		{
			"key": "content",
			"value": "",
			"type": "string"
		}
	]
}